 class ProgressDialogContent extends StatefulWidget {
  final String downloadUrl;
  final String name;

  const ProgressDialogContent({super.key, required this.downloadUrl, required this.name});

  @override
  State<StatefulWidget> createState() => _ProgressDialogContentState();
}

class _ProgressDialogContentState extends State<ProgressDialogContent> {
  String filePath = '';
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
  }

  Future<void> downloadPdf(String url, String name) async {
    await _startDownload(url, name);
  }

  Future<void> _startDownload(String url, String name) async {
    try {
      String extension = path.extension(Uri.parse(url).path);

      // الحصول على مسار مجلد التنزيلات
      Directory? downloadDirectory = await getExternalStorageDirectory();
      String? directoryPath = downloadDirectory?.path;

      // التأكد من أن المجلد ليس فارغًا
      if (directoryPath == null) {
        Get.snackbar('خطأ', 'لا يمكن الوصول إلى مجلد التنزيلات.');
        return;
      }

      // التأكد من وجود مجلد "Download"
      String downloadFolderPath = '$directoryPath/Download';
      Directory(downloadFolderPath).createSync(recursive: true);

      // بناء المسار الكامل للملف
      filePath = '$downloadFolderPath/${widget.name}$extension';

      Dio dio = Dio();
      await dio.download(url, filePath, onReceiveProgress: (received, total) {
        if (total != -1) {
          _progress = received / total;
          setState(() {});
        }
      });

      if (_progress == 1.0) {
        Get.snackbar('نجاح', 'تم تحميل الملف بنجاح إلى $filePath');
      }
    } catch (e) {
      Get.snackbar('خطأ', 'فشل في تحميل الملف: $e');
    }
  }

  void openPdf() async {
    if (_progress == 1.0) {
      // فتح الملف باستخدام الحزمة بدون الحاجة لإذن إضافي
      final result = await OpenFile.open(filePath);
      if (result.type != ResultType.done) {
        Get.snackbar('خطأ', 'فشل في فتح الملف: ${result.message}');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      crossAxisAlignment: CrossAxisAlignment.end,
      children: [
        const Text(
          'يتم تحميل الملف. يرجى الانتظار قليلاً قبل فتح الملف للمتابعة.',
          textAlign: TextAlign.center,
          style: TextStyle(fontSize: 16),
        ),
        const SizedBox(height: 10),
        Row(
          children: [
            Expanded(
              child: Container(
                height: 8,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  color: Colors.grey.shade300,
                  boxShadow: const [
                    BoxShadow(
                      color: Colors.black12,
                      blurRadius: 4,
                      offset: Offset(0, 2),
                    ),
                  ],
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: LinearProgressIndicator(
                    value: _progress,
                    valueColor: const AlwaysStoppedAnimation<Color>(AppColor.primaryColor),
                    backgroundColor: Colors.transparent,
                  ),
                ),
              ),
            ),
            const SizedBox(width: 12),
            Text(
              '${(_progress * 100).toStringAsFixed(0)}%',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ],
        ),
        const SizedBox(height: 20),
        Row(
          children: [
            Visibility(
              visible: _progress == 1.0,
              replacement: Expanded(
                child: _progress != 1.0 && _progress != 0.0
                    ? const Center(child: CircularProgressIndicator(color: AppColor.primaryColor))
                    : ElevatedButton.icon(
                  label: const Text(
                    'ابدأ التحميل',
                    style: TextStyle(color: Colors.white),
                  ),
                  icon: const Icon(Icons.download, color: Colors.white),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  onPressed: () {
                    downloadPdf(widget.downloadUrl, widget.name);
                  },
                ),
              ),
              child: Expanded(
                child: ElevatedButton.icon(
                  label: const Text('فتح الملف', style: TextStyle(color: Colors.white)),
                  icon: const Icon(Icons.description, color: Colors.white),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    padding: const EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  onPressed: () {
                    openPdf();
                  },
                ),
              ),
            ),
            const SizedBox(width: 10),
            Expanded(
              child: ElevatedButton.icon(
                label: const Text('إلغاء', style: TextStyle(color: Colors.white)),
                icon: const Icon(Icons.cancel, color: Colors.white),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.redAccent,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                onPressed: () {
                  Get.back();
                },
              ),
            ),
          ],
        ),
      ],
    );
  }
}
